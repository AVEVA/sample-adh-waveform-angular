trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

schedules:
  - cron: '0 0 * * 0'
    displayName: Weekly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: ArchitectureRepo
      type: git
      name: Architecture/Architecture
      ref: refs/heads/main
    - repository: templates
      type: github
      name: AVEVA/AVEVA-Samples
      endpoint: AVEVA

variables:
  - name: analysisProject
    value: SDS_Angular
  - name: login
    value: $(AuthorizationUsername)
  - name: pass
    value: $(AuthorizationPassword)
  - name: auth_origin
    value: $(Resource)
  - name: client_id
    value: $(AuthorizationCodeClientId)
  - name: authority
    value: $(AuthorityOCS)
  - name: CYPRESS_VERIFY_TIMEOUT
    value: 100000

parameters:
  - name: pool
    default: DevOps-Managed-Ubt22-Mdp
  - name: containerDemands
    type: object
    default: ['Agent.OS -equals Windows_NT']

jobs:
  - job: Tests
    condition: ne(variables['Build.Reason'], 'Schedule')
    pool:
      name: ${{ parameters.pool }}
      demands: ${{ parameters.containerDemands }}
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'AuthorizationUsername, AuthorizationPassword, Resource'
          appsettings: cred.json
          placeholder: cred.placeholder.json

      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'AuthorizationCodeClientId, AuthorityOCS'
          appsettings: oidc.config.json
          placeholder: oidc.config.placeholder.json

      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'TenantId, NamespaceId, CommunityId, Resource'
          appsettings: sdsconfig.json
          placeholder: sdsconfig.placeholder.json

      - script: npm ci
        displayName: 'Install dependencies'

      - script: npm run test
        displayName: 'Run Tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '*.xml'
          failTaskOnFailedTests: true
          searchFolder: '$(Build.SourcesDirectory)/TestResults'
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'
        condition: always()

  - template: '/miscellaneous/build_templates/code-analysis.yml@templates'
    parameters:
      buildSteps:
        - template: '/miscellaneous/build_templates/appsettings.yml@templates'
          parameters:
            secrets: 'AuthorizationUsername, AuthorizationPassword'
            appsettings: cred.json
            placeholder: cred.placeholder.json

        - template: '/miscellaneous/build_templates/appsettings.yml@templates'
          parameters:
            secrets: 'AuthorizationCodeClientId, AuthorityOCS'
            appsettings: oidc.config.json
            placeholder: oidc.config.placeholder.json

        - template: '/miscellaneous/build_templates/appsettings.yml@templates'
          parameters:
            secrets: 'TenantId, NamespaceId, CommunityId, Resource'
            appsettings: sdsconfig.json
            placeholder: sdsconfig.placeholder.json

        - script: npm ci
          displayName: 'Install dependencies'

        - script: npm run build
          displayName: 'Build'
